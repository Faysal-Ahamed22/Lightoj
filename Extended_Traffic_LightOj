/******************************************************/
/******************************************************/
/**            BISMILLAHIR RAHMANIR RAHIM            **/
/**         Md.Faysal Ahamed - ER3N YAGER            **/
/**  Department of Computer Science and Engineering  **/
/**               Barisal University                 **/
/**               It's time to Roar.                 **/
/******************************************************/
/******************************************************/
#include<bits/stdc++.h>
using namespace std;
#define ll   long long
#define pb   push_back
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl
#define all(x) (x).begin(), (x).end()
#define    gcd(a,b)      __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
const ll inf=1e10; 
const ll mx=223; 
ll dist[mx];
ll b[mx];
 struct info{
    ll u,v,w; 

 };

 vector<info>edge; 

 bool isrelaxed[mx];
 bool vis[mx];
 vector<ll>adj[mx];

 void dfs ( ll u){
    vis[u]=1; 
    for(auto v:adj[u]){
        if(!vis[v])dfs(v);
    }
 }

 void bellmenForde( ll s, ll n){

    for(ll i=1; i<=n; i++)dist[i]=inf; 
    dist[s]=0; 
    for(ll i=1; i<=n; i++){
        for(auto e:edge){
            ll u=e.u; 
            ll v=e.v; 
            ll w=e.w; 
            if(dist[u]<inf)
            {
                if(dist[u]+w <dist[v]){
                    dist[v]=max(-inf, dist[u]+w);
                    if(i==n){
                        isrelaxed[v]=1; 
                    }
                }
            }
        }
    }
 }

void solve(){

    ll n,m; 
    cin>>n;
    for(ll i=1; i<=n; i++){
        vis[i]=0; isrelaxed[i]=0; adj[i].clear();
        cin>>b[i];
    }
    cin>>m; 
    for(ll i=1; i<=m; i++){
        ll u,v; 
        cin>>u>>v; 
        ll d=b[v]-b[u];
        ll w=d*d*d; 
        edge.pb({ u, v, w});
    }

    bellmenForde(1 , n);
    for(ll i=1; i<=n; i++){
        if(isrelaxed[i])dfs(i);
    }

    ll q; 
    cin>>q; 
    while(q--){
        ll node; 
        cin>>node; 
        if(dist[node]==inf || vis[node] || dist[node]<3){
            cout<<"?\n";
        }
        else cout<<dist[node]<<endl;
    }
    
}

int main()
{
    optimize();
    ll t;
    cin>>t;
    for(ll tc=1; tc<=t; tc++)
    {
         cout << "Case " << tc << ":\n";
         edge.clear();
        solve();
    }
}
/*****************  ALHAMDULILLAH  *****************/
