/******************************************************/
/******************************************************/
/**            BISMILLAHIR RAHMANIR RAHIM            **/
/**         Md.Faysal Ahamed - ER3N YAGER            **/
/**  Department of Computer Science and Engineering  **/
/**               Barisal University                 **/
/**               It's time to Roar.                 **/
/******************************************************/
/******************************************************/
#include<bits/stdc++.h>
using namespace std;
#define ll   long long
#define pb   push_back
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl
#define all(x) (x).begin(), (x).end()
#define    gcd(a,b)      __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
const ll mx=1e4+123;
vector<pair<ll,ll>>adj[3][mx];
ll dist[3][mx];
struct info{
    ll u,v,w;
};

void dijextra(ll s, ll n, ll f1){

    for(ll i=1; i<=n; i++)dist[f1][i]=1e18;
    dist[f1][s]=0;
    priority_queue<pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>>pq;
    pq.push({0, s});
    while(!pq.empty())
    {
        ll u=pq.top().second;
        ll curD=pq.top().first;
        pq.pop();
        if(dist[f1][u]<curD)continue;

        for(auto e: adj[f1][u])
        {
            ll v=e.first;
            ll w=e.second;
            if(curD+w<dist[f1][v])
            {
                dist[f1][v]=curD+w;
                pq.push({dist[f1][v],v});
            }
        }
    }
    
}

int main()
{
    optimize();
    ll t;
    cin>>t;
    for(ll tc=1; tc<=t; tc++)
    {
       ll n,m,s,t,p;
       cin>>n>>m>>s>>t>>p;
       vector<info>edge;
       for(ll i=1; i<=n; i++)
       {
        adj[0][i].clear();
        adj[1][i].clear();
       }
       for(ll i=0; i<m; i++)
       {
        ll u,v,w; cin>>u>>v>>w; 
        adj[0][u].pb({v,w});
        adj[1][v].pb({ u, w});
        edge.pb({u,v,w});
       }
       dijextra( s, n, 0);
       dijextra( t, n, 1); 
       ll ans=-1; 
       for(auto e: edge)
       {
        ll u=e.u;
        ll v=e.v;
        ll w=e.w;
        ll cost=dist[0][u]+w+dist[1][v];
        if(cost<=p)ans=max(ans,w);
       }
       cout<<"Case "<<tc<<": "<<ans<<endl;

    }
}
/*****************  ALHAMDULILLAH  *****************/
