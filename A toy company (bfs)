
#include<bits/stdc++.h>
using namespace std;
#define ll   long long
#define pb   push_back
#define yes   cout<<"YES"<<endl
#define no   cout<<"NO"<<endl
#define all(x) (x).begin(), (x).end()
#define    gcd(a,b)      __gcd(a,b)
#define    lcm(a,b)  (a*b)/__gcd(a,b)
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
set<string>st; 
map<string, ll>vis; 
string bw,ew; 

int bfs(){

queue<string>q; 
q.push(bw);
ll lvl=0; 
while(!q.empty())
{
    lvl++; 
    ll sz=q.size();
    while(sz--)
    {
        string cur=q.front();
        q.pop();
        for(ll i=0; i<cur.size(); i++)
        {
            string t1=cur,t2=cur; 
            t1[i]=(char)(cur[i]-'a'+1)%26+'a';
            t2[i]=(char)(cur[i]-'a'-1+26)%26+'a';
            if(st.find(cur)!=st.end())continue; 
            if((st.find(t1)==st.end() && t1==ew ) || (st.find(t2)==st.end() && t2==ew ))return lvl; 
            if(st.find(t1)== st.end()  && vis[t1]==0)
            {
                q.push(t1);
                vis[t1]=1; 

            }
             if(st.find(t2)== st.end()  && vis[t2]==0)
            {
                q.push(t2);
                vis[t2]=1; 
                
            }
        }
    }
}

return -1; 
    
}

int main()
{
    optimize();
    ll t, tc=0;
    cin>>t;
    while(t--)
    {
        cin>>bw>>ew; 
        ll n; 
        cin>>n; 
        string s1, s2, s3; 
        for(ll i=0; i<n; i++)
        {
            cin>>s1>>s2>>s3; 
            for(ll j=0; j<s1.size(); j++)
            {
                for(ll k=0; k<s2.size(); k++)
                {
                    for(ll l=0; l<s3.size(); l++)
                    {
                        string x="";
                        x+=s1[j];
                        x+=s2[k];
                        x+=s3[l];
                        st.insert(x);

                    }
                }
            }
        }

        cout<<"Case "<<++tc<<": "; 
        if(st.find(ew)!=st.end())cout<<"-1"<<endl;
        else if(bw==ew)cout<<"0"<<endl;
        else{
            cout<<bfs()<<endl;
        }
        st.clear();
        vis.clear();

    }
}
/*****************  ALHAMDULILLAH  *****************/
